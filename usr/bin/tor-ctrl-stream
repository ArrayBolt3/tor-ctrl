#!/usr/bin/env sh

nocolor="\033[0m"
bold="\033[1m"

me="${0##*/}"

usage(){
  printf '%s\n' "usage: ${me} [-mzh] [-s socket] [-p password]

  -s [socket]    tor's control socket
                 notice: tcp: [addr:]port: 9051, 127.0.0.1:9051
                 notice: unix: [unix:]path: /run/tor/control, unix:/run/tor/control
                 default: 9051

  -p [pwd]       use password [pwd] instead of Tor's control_auth_cookie
                 default: not used

  -z             don't print circuit's path
                 default: not set

  -m             machine mode
                 notice: script informational and warning messages won't be printed to stdout
                 default: not set

  -h             print this help message
"
  exit 1
}


list_streams(){
  ##https://stackoverflow.com/a/22644006 and https://stackoverflow.com/a/53714583
  # shellcheck disable=SC2154
  trap "exit" INT QUIT TERM
  trap "rm -f stream.hosts stream.tmp stream.loop; kill 0" EXIT

  for stream_ordered in $(printf '%s\n' "${listen_stream}" | grep "^650 STREAM" | cut -d " " -f3 | sort -u | grep -v "^$"); do
    printf '%s\n' "${listen_stream}" | grep "^650 STREAM ${stream_ordered}" | while IFS="$(printf '\n')" read -r stream_line; do
      IFS=" " read -r _ _ stream_id stream_status circuit_id stream_target _ <<-EOF
        $(printf '%s\n' "${stream_line}")
EOF
      case "${stream_status}" in
        NEW|NEWRESOLVE)
          stream_target_orig="${stream_target}"
          stream_purpose="$(printf '%s\n' "${stream_line}" | tr " " "\n" | grep "PURPOSE=" | sed "s/PURPOSE=//")"
        ;;
        REMAP)
          stream_target_cache="$(printf '%s\n' "$(cat stream.hosts 2>/dev/null) ${stream_target_orig%:*}=${stream_target%:*}")"
          printf '%s\n' "${stream_target_cache}" | tee stream.hosts >/dev/null
          stream_target_hostname="$(printf '%s\n' "${stream_target_cache}" | tr " " "\n" | grep "=${stream_target%:*}" | head -n 1 | sed "s|=.*||")"
          stream_target_clean="$(printf '%s\n' "${stream_target}-(${stream_target_hostname})")"
        ;;
        CLOSED|SUCCEEDED)
          [ -n "${stream_target_clean}" ] && stream_target="${stream_target_clean}"
          # shellcheck disable=SC2086
          circuit_all="$(tor-ctrl -c "GETINFO circuit-status" ${cli_args})"
          circuit="$(printf '%s\n' "${circuit_all}" | grep "^${circuit_id} " | sed "/250 OK/d;/250+circuit-status=/d;/250 closing connection/d")"
          circuit_status="$(printf '%s\n' "${circuit}" | cut -d " " -f2)"
          circuit_path="$(printf '%s\n' "${circuit}" | cut -d " " -f3)"
          circuit_purpose="$(printf '%s\n' "${circuit}" | cut -d " " -f5 | sed "s/PURPOSE=//")"
          [ -z "${circuit_status}" ] && break
          if [ "${no_circuit}" -eq 0 ]; then
            printf %s"${bold}--------------------------------------------------------------------------------------------------------------${nocolor}\n"
            printf %s"${bold}Stream:${nocolor} ${stream_id}, ${bold}Purpose:${nocolor} ${stream_purpose}, ${bold}Target:${nocolor} ${stream_target}${nocolor}\n"
            printf %s"${bold}Circuit:${nocolor} ${circuit_id}, ${bold}Purpose:${nocolor} ${circuit_purpose}${nocolor}\n"
            printf %s"${bold}"
            printf '%1s. %-40s %-15s %-19s %-4s %9s\n' "n" "Fingerprint" "Address" "Nickname" "Geo" "Bandwidth"
            printf %s"${bold}--------------------------------------------------------------------------------------------------------------${nocolor}\n"
            hop=0
            for relay in $(printf '%s\n' "${circuit_path}" | tr "," " "); do
              hop=$((hop+1))
              [ ${hop} -gt 3 ] && break
              relay="$(printf '%s\n' "${relay}" | tr -d "$" | tr "~" " ")"
              relay_fingerprint="$(printf '%s\n' "${relay}" | cut -d " " -f1)"
              relay_nickname="$(printf '%s\n' "${relay}" | cut -d " " -f2)"
              # shellcheck disable=SC2086
              relay_status="$(tor-ctrl -c "GETINFO ns/id/${relay_fingerprint}" ${cli_args})"
              relay_host="$(printf '%s\n' "${relay_status}" | grep "^r " | cut -d " " -f7)"
              relay_bandwidth="$(printf '%s\n' "${relay_status}" | grep "^w " | sed "s/w Bandwidth=//;s/\\r//")"
              relay_bandwidth="$((relay_bandwidth*512/1024/1024)) MiB/s"
              # shellcheck disable=SC2086
              relay_locale="$(tor-ctrl -c "GETINFO ip-to-country/${relay_host}" ${cli_args})"
              relay_locale="$(printf '%s\n' "${relay_locale}" | grep "250-ip-to-country/${relay_host}=" | sed "s/.*=//;s/\\r//")"
              printf '%1s. %-40s %-15s %-19s %-4s %9s\n' "${hop}" "${relay_fingerprint}" "${relay_host}" "${relay_nickname}" "(${relay_locale})" "${relay_bandwidth}"
            done
            printf %s"${bold}--------------------------------------------------------------------------------------------------------------${nocolor}\n\n"
          else
            ! test -f stream.loop && {
              touch stream.loop
              printf %s"${bold}"
              printf "StreamId StreamPurpose StreamTarget CircuitId CircuitPurpose\n"
              printf %s"--------------------------------------------------------------------------------------------------------------${nocolor}\n"
            }
            printf %s"${stream_id} ${stream_purpose} ${stream_target} ${circuit_id}  ${circuit_purpose}\n"
          fi
          return
        ;;
      esac
    done
  done
}

command -v tor-ctrl >/dev/null || error_msg "Install tor-ctrl"

while getopts ":s:p:mzh" Option; do
  case ${Option} in
    s) tor_control_socket="${OPTARG}";;
    p) tor_password="${OPTARG}";;
    m) machine_mode=1;;
    z) no_circuit=1;;
    h|*) usage;;
  esac
done

cli_args=""
[ -n "${tor_control_socket}" ] && cli_args="${cli_args} -s ${tor_control_socket}"
[ -n "${tor_password}" ] && cli_args="${cli_args} -p ${tor_password}"
[ -n "${machine_mode}" ] && cli_args="${cli_args} -m"

## set default values
: "${machine_mode:=0}"
: "${no_circuit:=0}"

if [ "${machine_mode}" -eq 0 ]; then
  printf '%s\n' "${me}: [info]: subscribed to Tor stream events, as soon as streams are created, output will be shown below."
  printf '%s\n' "${me}: [warn]: posting these contents online can deanonymize the tor client."
fi

## it will print the streams table after receiving an INT signal
## other signals such as QUIT, TERM and EXIT should kill the process tree and exit
trap "list_streams" INT
trap "exit" QUIT TERM
trap "kill 0" EXIT

## this call will print to screen and sent to background
# shellcheck disable=SC2086
tor-ctrl -w -c "SETEVENTS STREAM" ${cli_args} &

## this call will save the events to a variable so it can be used later
# shellcheck disable=SC2086
listen_stream="$(tor-ctrl -w -c "SETEVENTS STREAM" ${cli_args})"
