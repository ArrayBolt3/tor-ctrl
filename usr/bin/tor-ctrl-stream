#!/usr/bin/env sh

nocolor="\033[0m"
bold="\033[1m"

me="${0##*/}"

usage(){
  printf '%s\n' "usage: ${me} [-s socket] [-p password]

  -s [socket]    tor's control socket
                 notice: tcp: [addr:]port: 9051, 127.0.0.1:9051
                 notice: unix: [unix:]path: /run/tor/control, unix:/run/tor/control
                 default: 9051

  -p [pwd]       use password [pwd] instead of Tor's control_auth_cookie
                 default: not used

  -m             machine mode
                 notice: script informational and warning messages won't be printed to stdout
                 default: not set
"
  exit 1
}


list_streams(){
  ##https://stackoverflow.com/a/22644006 and https://stackoverflow.com/a/53714583
  # shellcheck disable=SC2154
  trap "exit \$exit_code" INT QUIT TERM
  trap "exit_code=\$?; kill 0" EXIT

  listen_stream="$(printf '%s\n' "${listen_stream}" | sed "/250 OK/d;/250 closing connection/d")"
  printf '%s\n' "${listen_stream}" | while IFS="$(printf '\n')" read -r stream_line || [ -n "${stream_line}" ]; do
#  IFS=" " read -r stream_code stream_event stream_id stream_status circuit_id target _ <<-EOF
#    $(printf '%s\n' "${stream_line}")
#EOF
    stream_code="$(printf '%s\n' "${stream_line}" | cut -d " " -f1)"
    stream_event="$(printf '%s\n' "${stream_line}" | cut -d " " -f2)"
    stream_id="$(printf '%s\n' "${stream_line}" | cut -d " " -f3)"
    stream_status="$(printf '%s\n' "${stream_line}" | cut -d " " -f4)"
    circuit_id="$(printf '%s\n' "${stream_line}" | cut -d " " -f5)"
    target="$(printf '%s\n' "${stream_line}" | cut -d " " -f6)"
    if [ "${stream_code}" = "650" ] && [ "${stream_event}" = "STREAM" ]; then
      if [ "${stream_status}" = "SENTCONNECT" ]; then
        target_clear="$(printf '%s\n' "${stream_line}" | cut -d " " -f6)"
      elif [ "${stream_status}" = "REMAP" ]; then
        target_clear="$(printf '%s\n' "${target} (${target_clear})")"
      elif [ "${stream_status}" = "SUCCEEDED" ]; then
        [ -n "${target_clear}" ] && target="${target_clear}"
        # shellcheck disable=SC2086
        circuit_all="$(tor-ctrl -c "GETINFO circuit-status" ${cli_args})"
        circuit="$(printf '%s\n' "${circuit_all}" | grep "^${circuit_id} " | sed "/250 OK/d;/250+circuit-status=/d;/250 closing connection/d")"
        circuit_status="$(printf '%s\n' "${circuit}" | cut -d " " -f2)"
        circuit_path="$(printf '%s\n' "${circuit}" | cut -d " " -f3)"
        circuit_purpose="$(printf '%s\n' "${circuit}" | cut -d " " -f5 | sed "s/PURPOSE=//")"
        [ -z "${circuit_status}" ] && break
        if [ "${circuit_status}" = "BUILT" ]; then
          printf %s"${bold}--------------------------------------------------------------------------------------------------------------${nocolor}\n"
          printf %s"${bold}Stream:${nocolor} ${stream_id}, ${bold}Target:${nocolor} ${target}${nocolor}\n"
          printf %s"${bold}Circuit:${nocolor} ${circuit_id}, ${bold}Purpose:${nocolor} ${circuit_purpose}${nocolor}\n"
          printf %s"${bold}"
          printf '%1s. %-40s %-15s %-19s %-4s %9s\n' "n" "Fingerprint" "Address" "Nickname" "Geo" "Bandwidth"
          printf %s"${bold}--------------------------------------------------------------------------------------------------------------${nocolor}\n"
          hop=0
          for relay in $(printf '%s\n' "${circuit_path}" | tr "," " "); do
            hop=$((hop+1))
            [ ${hop} -gt 3 ] && break
            relay="$(printf '%s\n' "${relay}" | tr -d "$" | tr "~" " ")"
            relay_fingerprint="$(printf '%s\n' "${relay}" | cut -d " " -f1)"
            relay_nickname="$(printf '%s\n' "${relay}" | cut -d " " -f2)"
            # shellcheck disable=SC2086
            relay_status="$(tor-ctrl -c "GETINFO ns/id/${relay_fingerprint}" ${cli_args})"
            relay_host="$(printf '%s\n' "${relay_status}" | grep "^r " | cut -d " " -f7)"
            relay_bandwidth="$(printf '%s\n' "${relay_status}" | grep "^w " | sed "s/w Bandwidth=//;s/\\r//")"
            relay_bandwidth="$((relay_bandwidth*512/1024/1024)) MiB/s"
            # shellcheck disable=SC2086
            relay_locale="$(tor-ctrl -c "GETINFO ip-to-country/${relay_host}" ${cli_args})"
            relay_locale="$(printf '%s\n' "${relay_locale}" | grep "250-ip-to-country/${relay_host}=" | sed "s/.*=//;s/\\r//")"
            printf '%1s. %-40s %-15s %-19s %-4s %9s\n' "${hop}" "${relay_fingerprint}" "${relay_host}" "${relay_nickname}" "(${relay_locale})" "${relay_bandwidth}"
          done
          printf %s"${bold}--------------------------------------------------------------------------------------------------------------${nocolor}\n\n"
        fi
      fi
    fi
  done
}

while getopts ":s:p:mh" Option; do
  case ${Option} in
    s) tor_control_socket="${OPTARG}"; shift 2;;
    p) tor_password="${OPTARG}"; shift 2;;
    m) machine_mode=1; shift 1;;
    h|*) usage;;
  esac
done

cli_args=""
[ -n "${tor_control_socket}" ] && cli_args="${cli_args} -s ${tor_control_socket}"
[ -n "${tor_password}" ] && cli_args="${cli_args} -p ${tor_password}"
[ -n "${machine_mode}" ] && cli_args="${cli_args} -m"

## set default values
: "${machine_mode:=0}"

if [ "${machine_mode}" -eq 0 ]; then
  printf '%s\n' "${me}: [info]: subscribed to Tor stream events, as soon as streams are created, output will be shown below."
  printf '%s\n' "${me}: [warn]: posting these contents online can deanonymize the tor client."
fi

## it will print the streams table after receiving an INT signal
## other signals such as QUIT, TERM and EXIT should kill the process tree and exit
trap "list_streams" INT
trap "exit" QUIT TERM
trap "kill 0" EXIT

## this call will print to screen and sent to background
# shellcheck disable=SC2086
tor-ctrl -w -c "SETEVENTS STREAM" ${cli_args} &

## this call will save the events to a variable so it can be used later
# shellcheck disable=SC2086
listen_stream="$(tor-ctrl -w -c "SETEVENTS STREAM" ${cli_args})"
